TESTSUITE
---------

The old testsuite is in the root directory, and runs through shell code.
 - test_input contains all of the python code files to be checked.
 - test_expected contains the expected output
 - test_check.sh runs the testsuite

The new testsuite is in the test/ directory and uses the unittest module.
 - test/test_input contains all of the python code files to be checked.
 - test/test_expected contains the expected output
 - test/ contains the unittest modules
 - test/common.py contains common classes used in the unittest modules
 - test/main.py is the main test loader
 - run the testsuite either with:
   PYTHONPATH=`pwd`:$PYTHONPATH python test/main.py
   or 
   trial test

Adding a test:
 - add a TestCase in test/test_(type).py
 - add an input file in test/test_input/test_(name).py
 - run the test to generate an expected output for this test
 - adapt it, since it might not be what you want, if for example it generates
   a warning that it shouldn't

UPDATE TO NEW PYTHON VERSION
----------------------------
 - test/test_pychecker_CodeChecks has a test that fails on missing
   opcode handlers for new opcodes
 - add dispatchers for new opcodes in pychecker/CodeChecks.py
   - see http://docs.python.org/library/dis.html
   - figure out when they were added; in python source code:
     svn blame Lib/opcode.py
     svn diff -c [changeset that added/changed your opcode]
 - add version codes to pychecker/utils.py (PYTHON_X_Y)
 - add future keywords in pychecker/python.py

BUILDBOT
--------
A buildbot is set up at http://build.fluendo.com:8200/
